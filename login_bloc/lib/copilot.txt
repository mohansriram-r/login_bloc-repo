import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<String> login({
    required String email,
    required String password,
  }) async {
    String res = '';
    try {
      if (email.isNotEmpty || password.isNotEmpty) {
        await _auth.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
        res = 'sucess';
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'invalid-email') {
        res = 'invalid-email';
      }
    }
    return res;
  }

  Future<String> createUser({
    required String email,
    required String password,
  }) async {
    String res = '';
    try {
      if (email.isNotEmpty || password.isNotEmpty) {
        UserCredential userCredential =
            await _auth.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        res = 'sucess';
      }
    } catch (e) {
      res = e.toString();
    }
    return res;
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:login_bloc/presentation/custom_wideget/text_field.dart';
import 'package:login_bloc/presentation/login_screen/bloc/login_bloc.dart';
import 'package:login_bloc/presentation/signup_screen/signup_screen.dart';
import 'package:login_bloc/utils/helper/helper.dart';

class LoginScreen extends StatelessWidget {
  LoginScreen({super.key});
  final Helper _helper = Helper();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return BlocConsumer<LoginBloc, LoginState>(
      listener: (context, state) {
        if (state is NavigationToSignUpScreen) {
          _helper.navigationPush(context, const SignupScreen());
        }
      },
      builder: (context, state) {
        if (state is LoginLoading) {
          return const Scaffold(
            body: Center(
              child: CircularProgressIndicator(
                color: Colors.black,
              ),
            ),
          );
        }
        return Scaffold(
          body: Center(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 30),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Flexible(flex: 1, child: Container()),
                  Text(
                    "Login",
                    style: Theme.of(context).textTheme.headlineLarge,
                  ),
                  const SizedBox(height: 20),
                  CTextField(
                    emailController: _emailController,
                    hintText: "Email",
                    error: (state is LoginFailure) ? state.error : null,
                  ),
                  const SizedBox(height: 20),
                  CTextField(
                    emailController: _passwordController,
                    hintText: "Password",
                    isPass: true,
                    error: (state is LoginFailure) ? state.error : null,
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      context.read<LoginBloc>().add(
                            LoginButtonClicked(
                              email: _emailController.text,
                              password: _passwordController.text,
                            ),
                          );
                    },
                    child: const Text("Login"),
                  ),
                  Flexible(flex: 1, child: Container()),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        "Don't Have a Account?",
                        style: Theme.of(context).textTheme.labelSmall,
                      ),
                      const SizedBox(
                        width: 10,
                      ),
                      GestureDetector(
                        onTap: () {
                          context.read<LoginBloc>().add(SignUpButtonClicked());
                        },
                        child: Text(
                          "Sign up",
                          style: Theme.of(context).textTheme.labelSmall,
                        ),
                      )
                    ],
                  ),
                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

import 'package:flutter/material.dart';

class CTextField extends StatefulWidget {
  const CTextField({
    super.key,
    required this.emailController,
    this.isPass = false,
    this.error,
    this.passwordVisiable = false,
    required this.hintText,
  });

  final TextEditingController emailController;
  final bool isPass;
  final String? error;
  final bool passwordVisiable;
  final String hintText;

  @override
  State<CTextField> createState() => _CTextFieldState();
}

class _CTextFieldState extends State<CTextField> {
  late bool _isVisible;

  @override
  void initState() {
    _isVisible = widget.passwordVisiable;
    super.initState();
  }

  void _toggleVisibility() {
    setState(() {
      _isVisible = !_isVisible;
    });
  }

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: widget.emailController,
      keyboardType: widget.isPass
          ? TextInputType.visiblePassword
          : TextInputType.emailAddress,
      obscureText: widget.isPass ? _isVisible : false,
      decoration: InputDecoration(
        hintText: widget.hintText,
        hintStyle: Theme.of(context).textTheme.labelSmall,
        errorText: widget.error,
        filled: true,
        border: const OutlineInputBorder(
          borderSide: BorderSide(color: Colors.black),
        ),
        focusedBorder: const OutlineInputBorder(
          borderSide: BorderSide(color: Colors.black),
        ),
        suffixIcon: widget.isPass
            ? IconButton(
                onPressed: () {
                  _toggleVisibility();
                },
                icon: _isVisible
                    ? const Icon(Icons.remove_red_eye_outlined)
                    : const Icon(Icons.remove_red_eye_rounded),
              )
            : null,
      ),
    );
  }
}

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:login_bloc/service/auth_service.dart';
import 'package:meta/meta.dart';

part 'login_event.dart';
part 'login_state.dart';

class LoginBloc extends Bloc<LoginEvent, LoginState> {
  final AuthService _authService = AuthService();
  LoginBloc() : super(LoginInitial()) {
    on<SignUpButtonClicked>(_navigationToSignUpScreen);
    on<LoginButtonClicked>(_loginButtonClicked);
  }

  FutureOr<void> _navigationToSignUpScreen(
    SignUpButtonClicked event,
    Emitter<LoginState> emit,
  ) {
    emit(NavigationToSignUpScreen());
  }

  FutureOr<void> _loginButtonClicked(
    LoginButtonClicked event,
    Emitter<LoginState> emit,
  ) async {
    emit(LoginLoading());
    String res = await _authService.createUser(
      email: event.email,
      password: event.password,
    );

    if (res == 'sucess') {
      emit(LoginLoading());
    } else {
      emit(LoginFailure(error: res));
    }
  }
}
